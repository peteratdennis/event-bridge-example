# export EVENTBRIDGE_EXAMPLE_SERVICE=my-eventbridge
service: ${self:custom.serviceName}

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ${self:custom.serviceRegion}
  logRetentionInDays: 7
  versionFunctions: false

  environment:
    eventBusArn: ${self:custom.eventBusArn}
    serviceRegion: ${self:custom.serviceRegion}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "events:PutEvents"
      Resource: "*"

package:
  exclude:
    - node_modules/aws-sdk/**

custom:
  serviceName: ${env:EVENTBRIDGE_EXAMPLE_SERVICE, "eventbridge-example"}
  serviceRegion: ${env:EVENTBRIDGE_EXAMPLE_REGION, "eu-west-1"}

  infraServiceName: ${env:EVENTBRIDGE_EXAMPLE_INFRA_SERVICE, "eventbridge-example-infra"}
  # NB the event bus must have been created by deploying infrastucture.
  eventBusArn: ${cf:${self:custom.infraServiceName}-dev.ExampleBusArn}


functions:
  Consumer:
    handler: src/lambda/main_service/Consumer.handler
    events:
     - eventBridge:
        eventBus: ${self:custom.eventBusArn}
        pattern:
           source:
             - dennis.experimental.event

  # As the event bus is created in a different stack we can now have
  # multiple functions using it.
  # see https://github.com/serverless/serverless/issues/6882
  ConsumerTwo:
    handler: src/lambda/main_service/Consumer.handler
    events:
     - eventBridge:
        eventBus: ${self:custom.eventBusArn}
        pattern:
          source:
             - dennis.experimental.event
          detail:
            foo:
              - "bar"

  Producer:
    handler: src/lambda/main_service/Producer.handler
